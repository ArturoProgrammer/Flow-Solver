<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAACs
        CwAAAk1TRnQBSQFMAwEBAAEYAQABGAEAARgBAAEYAQAE/wEZAQAI/wFCAU0BNgcAATYDAAEoAwABYAMA
        ARgDAAEBAQABGAYAARsnAAH6AvkB7gHdAdkB6AG8AbEB5gGjAZIB6wGqAZcB7QG0AaEB7gG7AawB7QHN
        AcMB8AHjAd8B+wL6/AAB/AL7AewBzQHGAeYBlQGDAeYBkwF/AeYBkwF/AesBpgGSAe8BswGgAe8BswGg
        Ae8BswGgAe8BswGgAe8BswGgAe0BtAGjAe4B2QHRAfwC+/MAAfUB8AHvAeYBogGRAeYBkwF/AeYBkwF/
        AeYBkwF/AeYBkwF/Ae4BsAGdAe8BswGgAe8BswGgAe8BswGgAe8BswGgAe8BswGgAe8BswGgAe8BswGg
        Ae4BvAGtAfYB8gHx7QAB9AHtAewB5gGYAYQB5gGTAX8B5gGTAX8B5gGTAX8B5gGTAX8B5gGTAX8B7wGx
        AZ4B7wGzAaAB7wGzAaAB7wGzAaAB7wGzAaAB7wGzAaAB7wGzAaAB7wGzAaAB7wGzAaAB7QG1AaQB9QHw
        Ae7nAAH4AfYB9QHmAZoBiAHmAZMBfwHmAZMBfwHmAZMBfwHmAZMBfwHmAZMBfwHmAZMBfwHsAagBlQHv
        AbMBoAHvAbMBoAHvAbMBoAHvAbMBoAHvAbMBoAHvAbMBoAHvAbMBoAHvAbMBoAHvAbMBoAHvAbgBpgH4
        AfcB9uEAA/8B5QGwAaMB5gGTAX8B5gGTAX8B5gGTAX8B5gGTAX8B5gGTAX8B5gGTAX8B5gGTAX8B5wGY
        AYQB7wGzAaEB8AG2AaQB7wGzAaEB7wGzAaAB7wGzAaAB7wGzAaAB7wGzAaAB7wGzAaAB7wGzAaAB7wGz
        AaAB7AHFAbgD/94AAewB4AHdAbMBVAE2AcoBcAFWAdoBhAFuAeYBkwF/AeYBkwF/AeYBkwF/AesBoQGP
        AfMBuAGqAfgBxQG5AfkBxwG7AfgB1wHOAfcB3QHUAfQB0QHFAfEBvQGsAe8BswGgAe8BswGgAe8BswGg
        AeQBogGNAdIBhQFtAbcBXAE/AewB4AHd3gABxwGNAXwBrQFMAS0BrQFMAS0BrQFMAS0BuQFbAT4B0gF6
        AWIB8AGwAaAB+QHHAbsB1QHAAcwBqgG3AeABlQGyAekBoQG/Ae8BtwHKAewB3AHWAeAB9wHfAdcB8gHI
        AboB2QGRAXoBvQFlAUkBrQFMAS0BrQFMAS0BrQFMAS0BxwGNAXzbAAL6AfkBrAFOAS8BrQFMAS0BrQFM
        AS0BrQFMAS0BrQFMAS0BrQFMAS0B0QGGAXABswGNAZMBfQGtAfQBfQGtAfQBfQGtAfQBjwG7AfgBkQG9
        AfkBkQG9AfkBvAGaAZ0B0AGRAX0BrQFMAS0BrQFMAS0BrQFMAS0BrQFMAS0BrQFMAS0BrwFOATEC+gH5
        2AAB7gHkAeIBrQFMAS0BrQFMAS0BrQFMAS0BrQFMAS0BrQFMAS0BrQFMAS0BrQFMAS0BrAFOATABgQGp
        AeoBiQG3AfcBnAHFAfoBqwHQAfwBogHKAfsBlAG4Ae0BrQFOATABrQFMAS0BrQFMAS0BrQFMAS0BrQFM
        AS0BrQFMAS0BrQFMAS0BrQFMAS0B7gHkAeLYAAHkAdEBzAGtAUwBLQGtAUwBLQGtAUwBLQGtAUwBLQGt
        AUwBLQGtAUwBLQGtAUwBLQGsAU8BMwGSAbAB5AGZAcMB+gGuAdIB/AGuAdIB/AGuAdIB/AGqAcEB5QGt
        AU8BMgGtAUwBLQGtAUwBLQGtAUwBLQGtAUwBLQGtAUwBLQGtAUwBLQGtAUwBLQHkAdEBzNgAAeEBywHE
        Aa0BTAEtAa0BTAEtAa0BTAEtAa0BTAEtAa0BTAEtAa0BTAEtAa0BTAEtAZ8BhQGTAZEBvQH5AakBzwH8
        Aa4B0gH8Aa4B0gH8Aa4B0gH8Aa4B0gH8Aa4BjgGTAa0BTAEtAa0BTAEtAa0BTAEtAa0BTAEtAa0BTAEt
        Aa0BTAEtAa0BTAEtAeEBywHE2AAB5AHSAc0BrQFMAS0BrQFMAS0BrQFMAS0BrQFMAS0BrQFMAS0BrQFM
        AS0BrQFOATABkwG1AekBlgHBAfoBrgHSAfwBrgHSAfwBrgHSAfwBrgHSAfwBrgHSAfwBrgHHAesBrQFO
        ATABrQFMAS0BrQFMAS0BrQFMAS0BrQFMAS0BrQFMAS0BrQFMAS0B5AHSAc3YAAHuAeUB4gGtAUwBLQGt
        AUwBLQGtAUwBLQGtAUwBLQGtAUwBLQGtAUwBLQGoAWABUQGRAb0B+QGcAcUB+gGuAdIB/AGuAdIB/AGu
        AdIB/AGuAdIB/AGuAdIB/AGuAdIB/AGtAWMBUAGtAUwBLQGtAUwBLQGtAUwBLQGtAUwBLQGtAUwBLQGt
        AUwBLQHuAeUB49gAAfsC+gGvAU0BMQGtAUwBLQGtAUwBLQGtAUwBLQGtAUwBLQGsAU8BMgGIAacB4AGR
        Ab0B+QGeAcYB+gGuAdIB/AGuAdIB/AGuAdIB/AGuAdIB/AGuAdIB/AGuAdIB/AGNAaoB4AGsAU8BMgGt
        AUwBLQGtAUwBLQGtAUwBLQGtAUwBLQGvAU0BMQH7AvrbAAHIAZEBfgGtAUwBLQGtAUwBLQGtAUwBLQGt
        AUwBLQGkAWsBZgGMAbkB+AGRAb0B+QGhAckB+wGuAdIB/AGuAdIB/AGuAdIB/AGuAdIB/AGuAdIB/AGu
        AdIB/AGWAcAB+AGkAWsBZgGtAUwBLQGtAUwBLQGtAUwBLQGtAUwBLQHIAZABft4AAe0B4gHfAa0BTAEt
        Aa0BTAEtAa0BTAEtAa0BTAEtAaEBewGCAY8BugH1AZEBvQH5AaMBygH7Aa4B0gH8Aa4B0gH8Aa4B0gH8
        Aa4B0gH8Aa4B0gH8Aa4B0gH8AZ0BxAH3AaEBewGCAa0BTAEtAa0BTAEtAa0BTAEtAa0BTAEtAewB4gHf
        3gAD/wHGAY0BegGtAUwBLQGtAUwBLQGtAUwBLQGrAUwBLgFFAUwBegGRAb0B+QGdAcYB+gGuAdIB/AGu
        AdIB/AGuAdIB/AGuAdIB/AGuAdIB/AGuAdIB/AFRAVgBiAGrAUwBLgGtAUwBLQGtAUwBLQGtAUwBLQHG
        AY0BegP/4QAB+AH2AfUBtAFdAUEBrQFMAS0BrQFMAS0BogFJATACJwFUAY8BugH1AZcBwQH6Aa4B0gH8
        Aa4B0gH8Aa4B0gH8Aa4B0gH8Aa4B0gH8AasBzQH2AjMBZgGiAUoBMgGtAUwBLQGtAUwBLQGzAV0BQQH4
        AfYB9ecAAfEB6wHpAbIBWQE8Aa0BTAEtAaYBSgEvAicBVAGJAbIB7AGWAcEB+gGuAdIB/AGuAdIB/AGu
        AdIB/AGuAdIB/AGuAdIB/AGkAcUB7wIzAWYBlwFHATgBrQFMAS0BsgFZATwB8QHrAentAAH0AfAB7gG7
        AW4BVwGtAUwBLQFJATEBSgFgAXcBrAGRAb0B+QGpAc8B/AGhAcAB6wGhAcAB6wGuAdIB/AGuAdIB/AF0
        AYYBswIzAWYBogFKATIBuQFtAVYB9AHwAe7zAAP8AdoBvAGyAagBUwE7ASgBJwFUATMBOAFnATsBPwFx
        AjMBZgIzAWYBQQFEAXYBQQFEAXUCMwFmAVkBQwFgAdoBvAGyA/z8AAP7AYwBiQGfAicBVAIxAWMCMwFm
        AjMBZgIzAWYCMwFmAmUBiQL3Afj/AAYAA/0CvQHIAmUBhgI8AW0CPQFvAnIBlALGAdID/fAAAUIBTQE+
        BwABPgMAASgDAAFgAwABGAMAAQEBAAEBBQABIAEBFgAD/wEAAf4BAAF/CQAB+AEAAR8JAAHwAQABDwkA
        AeABAAEHCQABwAEAAQMJAAGAAQABAQkAAYABAAEBCQABgAEAAQFdAAGAAQABAQkAAYABAAEBCQABgAEA
        AQEJAAHAAQABAwkAAeABAAEHCQAB8AEAAQ8JAAH4AQABHwkAAf4BAAF/CQAB/wEAAf8JAAs=
</value>
  </data>
</root>